function [] = MakeEngineDecks()
%
% [] = MakeEngineDecks()
% written by Paul Mokotoff, prmoko@umich.edu
% last updated: 06 aug 2024
%
% Create engine decks for an engine at its SLS thrust, as well as smaller
% variants of the same engine.
%
% INPUTS:
%     none
%
% OUTPUTS:
%     none
%


%% IMPORT THE CF34-8E5 ENGINE %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% get the aircraft
Aircraft = AircraftSpecsPkg.ERJ175LR;

% get the SLS thrust
SLSThrust = Aircraft.Specs.Propulsion.Engine.DesignThrust;

% come up with different engine sizes
EngineSizes = [1.00; 0.95; 0.90];

% create an array of thrusts to design an engine for
DesignThrust = SLSThrust .* EngineSizes;

% add flight conditions
Aircraft.Specs.Propulsion.Engine.Alt = 0;
Aircraft.Specs.Propulsion.Engine.Mach = 0.05;

% turn on flag for sizing the engine
Aircraft.Specs.Propulsion.Engine.Sizing = 1;
   

%% SIZE THE NEW ENGINES %%
%%%%%%%%%%%%%%%%%%%%%%%%%%

% number of engines to size
neng = length(EngineSizes);

% memory for the engines
SizedEngines = cell(neng, 1);

% size the engines
for ieng = 1:neng
    
    % get the thrust to be generated by an engine
    Aircraft.Specs.Propulsion.Engine.DesignThrust = DesignThrust(ieng);
    
    % size the engine
    SizedEngines{ieng} = EngineModelPkg.TurbofanNonlinearSizing(Aircraft.Specs.Propulsion.Engine, 0);
    
end


%% SETUP FLIGHT CONDITIONS %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% create a set of flight conditions
AltList  = (0    : 5000 : 35000)';
MachList = (0.00 : 0.10 : 0.80 )';
PCList   = (0    : 0.05 : 1.00 )';

% get the densities at altitude
[~, ~, ~, ~, ~, RhoList] = MissionSegsPkg.ComputeFltCon(convlength(AltList, "ft", "m"), 0, "Mach", 0);

% compute the density ratio
RhoRatio = RhoList ./ RhoList(1);

% get the number of flight conditions
nalt  = length(AltList );
nmach = length(MachList);
npc   = length(PCList  );

% total number of simulations to run
ncon = nalt * nmach * npc;

% allocate memory for inputs
Alt  = zeros(ncon, 1);
Mach = zeros(ncon, 1);
PC   = zeros(ncon, 1);
Rho  = zeros(ncon, 1);

% allocate memory for outputs
MDot = zeros(ncon, 1);
Tnet = zeros(ncon, 1);
SFC  = zeros(ncon, 1);

% setup a counter variable
icon = 1;

% setup the inputs and evaluate
for ialt = 1:nalt
    for imach = 1:nmach
        for ipc = 1:npc
            
            % remember the flight condition combination
            Alt( icon) = AltList(  ialt);
            Rho( icon) = RhoRatio( ialt);
            Mach(icon) = MachList(imach);
            PC(  icon) = PCList(    ipc);
            
            % increment the counter
            icon = icon + 1;
            
        end
    end
end


%% FILL OUT THE TABLES %%
%%%%%%%%%%%%%%%%%%%%%%%%%

% loop through all engines
for ieng = 1:neng
    
    % fly all of the conditions
    for icon = 1:ncon
        
        % update the engine performance requirements
        OffParams.FlightCon.Mach = Mach(icon) ;
        OffParams.FlightCon.Alt  = Alt( icon) ;
        OffParams.Thrust         = PC(  icon) * DesignThrust(ieng) * Rho(icon);
        
        % run the engine analysis
        OffDesignEngine = EngineModelPkg.SimpleOffDesign(SizedEngines{ieng}, OffParams, 0);
        
        % get out the SFC
        SFC(icon) = OffDesignEngine.TSFC * Aircraft.Specs.Propulsion.MDotCF;
        
        % get the fuel flow
        MDot(icon) = OffDesignEngine.Fuel * Aircraft.Specs.Propulsion.MDotCF;
        
        % get the net thrust
        Tnet(icon) = OffParams.Thrust;
        
    end
    
    % assemble the results into an engine deck
    EngineDeck = table(Alt, Mach, PC, MDot, Tnet, SFC);
   
    % name the table
    TableName = sprintf("EngineDeck-%03d.mat", 100 * EngineSizes(ieng));
    
    % save the table
    save(TableName, "EngineDeck");
    
end

% ----------------------------------------------------------

end